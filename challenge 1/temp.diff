diff --git a/challenge 1/api_gmail.py b/challenge 1/api_gmail.py
index 27eed92..5834ef0 100644
--- a/challenge 1/api_gmail.py	
+++ b/challenge 1/api_gmail.py	
@@ -1,24 +1,17 @@
-#  returns a dict like this
-#   {
-#       'messages': list of messages -> each one like this {'Date': date, 'Sender': sender, 'Subject': subject}
-#       'user': user's account email       
-#   }
-#
-from __future__ import print_function
+
 from apiclient.discovery import build
 from httplib2 import Http
 from oauth2client import file, client, tools
-import dateutil.parser as parser
-def getMails():
-    """
-      returns a dict like this
-      {
-       'messages': list of messages -> each one like this {'Date': date, 'Sender': sender, 'Subject': subject}
-       'user': user's account email       
-      }
+from dateutil import parser
 
+def get_mails_info(query):
+    """
+    returns: 
+        1. A list of dicts containing info from messages that matches the word query in subject or body. The keys are 'Subject', 'Date', 'From'
+        2. User's email
     """
     user_id = 'me'
+
     # Setup the Gmail API
     scopes = 'https://www.googleapis.com/auth/gmail.readonly'
     store = file.Storage('credentials.json')
@@ -33,61 +26,30 @@ def getMails():
     user_email = resp['emailAddress']
     
     # Call the Gmail API to resquest messages:
-    resp = service.users().messages().list(userId=user_id,q='subject: DevOps').execute()
-    raw_messages = []
-    
-    
-    if 'messages' in response:
-       # raw_messages.extend(response['messages'])
-        mails.extends(build_mail(m['id'] , user_email) for m in response['messages']) 
-    while 'nextPageToken' in response:
-        page_token = response['nextPageToken']
-        response = service.users().messages().list(userId=user_id, q='subject: DevOps',pageToken=page_token).execute()
-        raw_messages += response['messages']
-    
-    mssgs = []
-    # Get Subject, Sender and Date from mssgs
-    """for raw_mssg in raw_messages:
-        resp = service.users().messages().get(user_id=user_id, id_=raw_mssg['id']).execute()
+    resp = service.users().messages().list(userId=user_id,q=query).execute()
+    mails = []
+
+    def build_mail(id_ ): 
+        """
+            Get Subject, Sender and Date from a mssg given an id
+        """
+        resp = service.users().messages().get(userId=user_email, id=id_).execute()
         payId = resp['payload']
         headers = payId['headers']
-        temp_dict = {}
+        mail = {}
         for header in headers:
             if header['name'] == 'Subject':
-                msg_subject = header['value']
-                temp_dict['Subject'] = msg_subject
-            elif header['name'] == 'Date':
-                msg_date = header['value']
-                date_parse = (parser.parse(msg_date))
-                m_date = (date_parse.date())
-                temp_dict['Date'] = {'day': m_date.day,'month': m_date.month, 'year': m_date.year}
+                mail['Subject'] = header['value']
+            elif header['name'] == 'Date': 
+                mail['Date'] = parser.parse(header['value'])
             elif header['name']=='From':
-                msg_from = header['value']
-                temp_dict['Sender'] = msg_from
-            else:
-                pass
-        #print(temp_dict)    
-        mssgs.append(temp_dict)
-    #resp = {'messages': mssgs, 'user': user_email}"""
-    return (mssgs, user_email)
-
+                mail['From'] = header['value']
+        return(mail)
 
- def _build_mail(id_ , user_id): 
-    """
-        recibe id y extrae los datos que me sirven de la api
-        seria lo que esta en temp_dict
-    """
-    resp = service.users().messages().get(user_id=user_id, id_=id_).execute()
-    payId = resp['payload']
-    headers = payId['headers']
-    mail = {}
-    for header in headers:
-        if header['name'] == 'Subject':
-            mail['Subject'] = header['value']
-        elif header['name'] == 'Date': 
-            mail['Date'] = parser.parse(header['value'])
-        elif header['name']=='From':
-            mail['Sender'] = header['value']
-        else:
-            pass
-    return(temp_dict)
+    if 'messages' in resp:
+        mails.extend(build_mail(m['id']) for m in resp['messages']) 
+    while 'nextPageToken' in resp:
+        page_token = response['nextPageToken']
+        resp = service.users().messages().list(userId=user_id, q=query,pageToken=page_token).execute()
+        mails.extend(build_mail(m['id']) for m in response['messages']) 
+    return (mails, user_email)
diff --git a/challenge 1/main.py b/challenge 1/main.py
index 074c4f7..f7861c4 100644
--- a/challenge 1/main.py	
+++ b/challenge 1/main.py	
@@ -1,10 +1,26 @@
 import api_gmail
 from sqli_db import DevOpMail
-def main():
-    mssgs, user_email = api_gmail.getMails() ## Nombrar mejor
-    #print(msj)
-    devopmail = DevOpMail()
-    devopmail.insertMails(msgs)
+
+def fetch_and_store_mails():
+    mails, user_email = api_gmail.get_mails_info('devops')
+    for m in mails:
+        DevOpMail.create(
+            user_id = user_email,
+            datetime = m['Date'],
+            sender = m['From'],
+            subject = m['Subject']
+        )
+
+def list_devops_mail():
+    fmt = u'{:25} {:24} {:25} {}'
+    print(fmt.format('User_id', 'DateTime', 'Sender', 'Subject'))    
+    for mail in DevOpMail.select():
+        print(fmt.format(mail.user_id, mail.datetime, mail.sender, mail.subject))    
+
 
 if __name__ == '__main__':
-    main()
\ No newline at end of file
+    import sys
+    if len(sys.argv) == 2 and sys.argv[1] == 'list':
+        list_devops_mail()
+    else:
+        fetch_and_store_mails()
\ No newline at end of file
diff --git a/challenge 1/requirements.txt b/challenge 1/requirements.txt
index e69de29..7c45bc2 100644
--- a/challenge 1/requirements.txt	
+++ b/challenge 1/requirements.txt	
@@ -0,0 +1,3 @@
+google-api-python-client
+peewee
+python-dateutil
diff --git a/challenge 1/sqli_db.py b/challenge 1/sqli_db.py
index efcfed8..07df5d2 100644
--- a/challenge 1/sqli_db.py	
+++ b/challenge 1/sqli_db.py	
@@ -1,22 +1,13 @@
-from peewee import *
-from datetime import date
+from peewee import Model, SqliteDatabase, CharField, DateTimeField
+
 db = SqliteDatabase('challenge2_meli.db')
 
 class DevOpMail(Model):
     user_id = CharField()
-    date  = DateTimeField()
+    datetime  = DateTimeField()
     sender = CharField()
     subject = CharField()
     class Meta:
         database = db
-    def insertMails(self,mails):    
-        db.connect()
-        db.create_tables([DevOpMail])
-        for mail in mails['messages']:
-            dev_mail = DevOpMail(user_id=mails['user'], date = mail['Date'], sender=mail['Sender'], subject=mail['Subject'])
-            dev_mail.save()
-        for mail in DevOpMail.select():
-            print(mail.sender)
-            print(mail.user_id)
-            print(mail.date)
-            print(mail.subject)
\ No newline at end of file
+
+db.create_tables([DevOpMail])
\ No newline at end of file
